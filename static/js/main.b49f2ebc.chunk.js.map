{"version":3,"sources":["serviceWorker.js","components/AppBar.js","pages/Layout.js","pages/Content.js","pages/index.js","theme.js","client.js","index.js"],"names":["Boolean","window","location","hostname","match","AppBar","props","react_default","a","createElement","position","elevation","Toolbar","variant","Typography","color","role","aria-label","Layout","_ref","children","Box","minWidth","AppBar_AppBar","p","Content","theme","useTheme","Fragment","display","style","gap","Button","href","JSON","stringify","Pages","react_router","exact","path","component","render","createMuiTheme","palette","primary","main","lightBlue","client","ApolloClient","uri","ReactDOM","react_router_dom","react_apollo_esm","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yKAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,6ICfS,SAASC,EAAOC,GAC7B,OACEC,EAAAC,EAAAC,cAACJ,EAAA,EAAD,CAAWK,SAAS,SAASC,UAAW,GACtCJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAASC,QAAQ,SACfN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAYC,MAAM,UAAUF,QAAQ,MAApC,YACY,IACVN,EAAAC,EAAAC,cAAA,QAAMO,KAAK,MAAMC,aAAW,aAA5B,mBCJK,SAASC,EAATC,GAA8B,IAAZC,EAAYD,EAAZC,SAC/B,OACEb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAKC,SAAS,eACZf,EAAAC,EAAAC,cAACc,EAAD,MACAhB,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAKG,EAAG,GAAIJ,yBCLH,SAASK,EAAQnB,GAC9B,IAAMoB,EAAQC,cACd,OACEpB,EAAAC,EAAAC,cAACF,EAAAC,EAAMoB,SAAP,KACErB,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAKQ,QAAQ,OAAOC,MAAO,CAAEC,IAAK,QAChCxB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAQnB,QAAQ,WAAWE,MAAM,UAAUK,SAAS,YACpDb,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAQnB,QAAQ,WAAWE,MAAM,YAAYK,SAAS,cACtDb,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAQnB,QAAQ,WAAWoB,KAAK,IAAIb,SAAS,UAE/Cb,EAAAC,EAAAC,cAAA,qBAAayB,KAAKC,UAAUT,EAAO,KAAM,KCPxC,SAASU,EAAM9B,GACpB,OACEC,EAAAC,EAAAC,cAACS,EAAD,KACEX,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,KACE9B,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWf,IACjClB,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAOI,OAAQ,kBAAMlC,EAAAC,EAAAC,cAAA,uDCRhBiB,EAAQgB,YAAe,CAClCC,QAAS,CACPC,QAAS,CACPC,KAAMC,IAAS,SCJRC,EAAS,UAAIC,GAAa,CACrCC,IAAK,0CCUPC,IAAST,OAAOlC,EAAAC,EAAAC,cAGhB,SAAaH,GACX,OACEC,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,KACE5C,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAgBL,OAAQA,GACtBxC,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CAAe3B,MAAOA,GACpBnB,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,MACA/C,EAAAC,EAAAC,cAAC2B,EAAD,UATM,MAASmB,SAASC,eAAe,SPoH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b49f2ebc.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { AppBar as MuiAppBar, Toolbar, Typography } from '@material-ui/core';\n\nexport default function AppBar(props) {\n  return (\n    <MuiAppBar position=\"static\" elevation={0}>\n      <Toolbar variant=\"dense\">\n        <Typography color=\"inherit\" variant=\"h6\">\n          Spaceship{' '}\n          <span role=\"img\" aria-label=\"spaceship\">\n            ðŸš€\n          </span>\n        </Typography>\n      </Toolbar>\n    </MuiAppBar>\n  );\n}\n","import React from 'react';\nimport { Box } from '@material-ui/core';\n\nimport AppBar from 'components/AppBar';\n\nexport default function Layout({ children }) {\n  return (\n    <Box minWidth=\"fit-content\">\n      <AppBar />\n      <Box p={1}>{children}</Box>\n    </Box>\n  );\n}\n","import React from 'react';\nimport { Box, Button } from '@material-ui/core';\nimport { useTheme } from '@material-ui/styles';\n\nexport default function Content(props) {\n  const theme = useTheme();\n  return (\n    <React.Fragment>\n      <Box display=\"flex\" style={{ gap: '8px' }}>\n        <Button variant=\"outlined\" color=\"primary\" children=\"primary\" />\n        <Button variant=\"outlined\" color=\"secondary\" children=\"secondary\" />\n        <Button variant=\"outlined\" href=\"#\" children=\"link\" />\n      </Box>\n      <pre>theme: {JSON.stringify(theme, null, 2)}</pre>\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport Layout from './Layout';\nimport Content from './Content';\n\nexport function Pages(props) {\n  return (\n    <Layout>\n      <Switch>\n        <Route exact path=\"/\" component={Content} />\n        <Route render={() => <p>you seem lost...</p>} />\n      </Switch>\n    </Layout>\n  );\n}\n","import { createMuiTheme } from '@material-ui/core/styles';\nimport { lightBlue } from '@material-ui/core/colors';\n\nexport const theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: lightBlue['A700'],\n    }\n  }\n});\n","import ApolloClient from 'apollo-boost';\n\nexport const client = new ApolloClient({\n  uri: \"https://48p1r2roz4.sse.codesandbox.io\"\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport { HashRouter as Router } from 'react-router-dom';\nimport { ApolloProvider } from 'react-apollo';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { CssBaseline } from '@material-ui/core';\n\nimport { Pages } from './pages';\nimport { theme } from './theme';\nimport { client } from './client';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n\nfunction App(props) {\n  return (\n    <Router>\n      <ApolloProvider client={client}>\n        <ThemeProvider theme={theme}>\n          <CssBaseline />\n          <Pages />\n        </ThemeProvider>\n      </ApolloProvider>\n    </Router>\n  );\n}\n"],"sourceRoot":""}